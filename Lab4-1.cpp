
// Lab4.cpp – Листинг программы для Задания №1, 4-ой лабораторной работы
// Вариант 8
//*******************************************************************************
// Имя файла : Lab4.cpp
// Резюме : Пример программы написанной на языке программирования С++
// Описание :  
// Программа вычисляет и печатает таблицу значений функции f(x) и ее максимальное по 
// модулю значение на промежутке [a, b) при дискретном увеличении х с шагом h.
// реализован запрос на выбор способа подготовки данных: ручной ввод, либо 
// «автоматическая» программная генерация с использованием аналога функции rand(), 
// реализованного по алгоритму линейного конгруэнтного генератора(ЛКГ), с последующей 
// «адаптацией» сгенерированных данных к требованиям программы.
// Дата создания : 2022 / 01 / 04.02.2022
// Автор : Студент НГТУ ИРИТ, Халеев А.А., гр. 21-ИВТз
// Платформа : OS Microsoft Windows, MS Visual Studio 2019 (Community)
// ******************************************************************************

/* Подключение модулей */
#include <stdio.h>
#include <iostream>
#include <errno.h>
#include "functions.h"


int main(){
	errno = 0;  // Переменная модуля errno.h, хранящая целочисленный код последней ошибки. 0 - отсутствие ошибок
	setlocale(LC_ALL, "RUS"); // Вызов функции отображения русских символов

	/* Логотип программы */
	const  char* logo = " *********************************************************\n\
 * Нижегородский государственный технический университет *\n\
 * Лабораторная работа №4. Задание 8.                    *\n\
 * Выполнил студент группы 21 - ИВТз Халеев Алексей      *\n\
 *********************************************************\n";
	printf_s(logo);

	int choice;  // Переменная для хранения выбора пользователя
	double a{ -1 }, b{ 1 }, h{ 0.1 }; // Переменные полуинтервала х и шага h
	while (true) {  // Бесконечный цикл вывода меню и выполнения задачи
		choice = Menu();
		switch (choice) {
		case 1:	RandomInput(a, b, h); break;
		case 2:	HandInput(a, b, h); break;
		case 3: {
			printf(" Работа программы успешно завершена.\n\n");
			system("pause");
			return 0;
		}
		}
		int fx_rows = GetXRange(a, b, h); // вычисление количество строк в массиве для f(x) и х
		std::set_new_handler(new_error); // назначение функции, выполняемой при возврашения кода ошибки функцией new()
		try {
			double** FxTable = new double* [fx_rows]; // выделение динамической памяти для двумерного массива значений
			for (int i = 0; i < fx_rows; i++) {       // f(x) и x
				FxTable[i] = new double[FXCOL];
			}
			InitFxTable(FxTable, fx_rows, a, h);  // вычисление значений согласно условия задачи и занесение в массив
			PrintFxTable(FxTable, fx_rows);       // печать таблицы значений f(x) и x
			printf("\n Максимальное по модулю значение f(x) на полуинтервале [%.3lf, %.3lf),\n\ \
при дискретном увеличении Х с шагом %.3lf: %lf\n\n", a, b, h, FxTableMax(FxTable, fx_rows));
			system("pause");
			for (int i = 0; i < fx_rows; i++) {  // освобождение динамической памяти
				delete[] FxTable[i];
			}
			delete[] FxTable;
		}
		catch (std::exception e) { // Обработка исключения, связанного с выделенимем динамической памяти
			perror("Memory allocation error");
		}
	}
	return 0; // Завершение программы с успешным кодом (в данном случае не достижимое изз цикла while)
}
